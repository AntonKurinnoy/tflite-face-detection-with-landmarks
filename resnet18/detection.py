import tensorflow as tf
import cv2 as cv
import numpy as np
import torch
from torch import Tensor
from resnet18.utils import draw_landmarks, draw_bboxes, get_eyes_status, get_head_turn_98, get_head_turn_29
from resnet18.prior_box import PriorBox
from resnet18.utils import normalize
from model_utils import decode, nms
from image_utils import resize_image, resize_image_to_original


def detect(image, landmarks_number):
    original_height, original_width = image.shape[:2]
    width, height, side = 640, 640, 640
    resized_img = resize_image(image, side)

    bboxes = detect_face(resized_img)
    extend = 0.2
    det_num = bboxes.shape[0]
    landmarks = []
    if det_num == 0:
        return np.array(landmarks), bboxes

    for i in range(det_num):
        x1 = int(bboxes[i][0])
        y1 = int(bboxes[i][1])
        x2 = int(bboxes[i][2])
        y2 = int(bboxes[i][3])

        w = x2 - x1 + 1
        h = y2 - y1 + 1

        x1 -= int(w * (1. + extend - 1) / 2)
        y1 += int(h * (1. + extend - 1) / 2)
        x2 += int(w * (1. + extend - 1) / 2)
        y2 += int(h * (1. + extend - 1) / 2)
        x1 = max(x1, 0)
        y1 = max(y1, 0)
        x2 = min(x2, width - 1)
        y2 = min(y2, height - 1)
        cropped_image = np.array(resized_img)[y1:y2, x1:x2, :]
        lms_pred = detect_landmarks(cropped_image, landmarks_number)
        lms_pred[:, 0] += x1
        lms_pred[:, 1] += y1
        landmarks.append(lms_pred)

    landmarks = landmarks[0].reshape((det_num, -1, 2))

    resized_img = draw_bboxes(resized_img, bboxes)
    resized_img = draw_landmarks(resized_img, landmarks, print_all=False, landmarks_number=landmarks_number)

    # head turn
    if landmarks_number == 98:
        head_turn = get_head_turn_98(landmarks)
        cv.putText(resized_img, head_turn, (int(bboxes[0][0]), int(bboxes[0][1]) - 5), cv.FONT_HERSHEY_DUPLEX, 0.5,
                   (0, 0, 255))
    else:
        head_turn = get_head_turn_29(landmarks)
        cv.putText(resized_img, head_turn, (int(bboxes[0][0]), int(bboxes[0][1]) - 5), cv.FONT_HERSHEY_DUPLEX, 0.5,
                   (0, 0, 255))

    # check open eyes
    if landmarks_number == 98:
        eyes = get_eyes_status(landmarks)
        cv.putText(resized_img, eyes, (int(bboxes[0][0]), int(bboxes[0][1]) - 18), cv.FONT_HERSHEY_DUPLEX, 0.5,
                   (0, 0, 255))

    resized_image_back_to_original = resize_image_to_original(resized_img, original_width, original_height)

    return resized_image_back_to_original


def detect_face(image):
    cfg = {
        'min_sizes': [[32, 64, 128], [256], [512]],
        'steps': [32, 64, 128],
        'variance': [0.1, 0.2],
        'clip': False,
        'loc_weight': 2.0,
        'gpu_train': True
    }
    w, h, side = 640, 640, 640
    thresh = 0.6
    top_k = 100
    device = "cpu"
    resized_img = np.float32(image)
    resized_img -= (104, 117, 123)
    resized_img = resized_img.transpose(2, 0, 1)
    resized_img = torch.from_numpy(resized_img).unsqueeze(0)

    interpreter = tf.lite.Interpreter(model_path="faceboxesv2-640x640.tflite")
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    interpreter.allocate_tensors()
    # print(input_details[0])
    # print(output_details[0])
    # print(output_details[1])

    interpreter.set_tensor(input_details[0]['index'], resized_img.to(device))
    interpreter.invoke()
    conf = interpreter.get_tensor(output_details[0]['index'])
    loc = interpreter.get_tensor(output_details[1]['index'])

    # scores from conf
    scores = conf.squeeze(0)[:, 1]

    # boxes from loc
    priorbox = PriorBox(cfg, image_size=(w, h))
    priors = priorbox.forward()
    priors = priors.to(device)
    prior_data = priors.data
    loc_torch = torch.from_numpy(loc.squeeze(0))
    boxes = decode(loc_torch, prior_data, cfg['variance'])
    scale = torch.Tensor([w, h, w, h])
    scale = scale.to(device)
    boxes = boxes * scale
    boxes = boxes.cpu().numpy()

    # ignore low scores
    inds = np.where(scores > thresh)[0]
    boxes = boxes[inds]
    scores = scores[inds]

    # keep top-K before NMS
    order = scores.argsort()[::-1][:top_k * 3]
    boxes = boxes[order]
    scores = scores[order]

    # nms
    dets = np.hstack((boxes, scores[:, np.newaxis])).astype(np.float32, copy=False)
    keep = nms(dets, 0.3)
    dets = dets[keep, :]
    dets = dets[:top_k, :]  # x1,y1,x2,y2,score

    return dets


def detect_landmarks(image, landmarks_number):
    height, width, _ = image.shape
    image_res: np.ndarray = cv.resize(image, (256, 256))
    image: Tensor = torch.from_numpy(normalize(img=image_res)).contiguous().unsqueeze(0)  # (1,3,256,256)

    device = "cpu"
    num_lms: int
    max_len: int
    if landmarks_number == 98:
        num_lms = 98
        max_len = 17
        reverse_index1 = [1, 2, 3, 4, 5, 33, 1, 2, 3, 4, 5, 33, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 6, 33, 0, 2, 3, 4, 5, 6,
                          33,
                          0, 2, 3, 0, 1, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 0, 1, 3, 4, 5, 0, 1, 2, 4, 5, 6, 7, 0, 1, 2, 4,
                          5, 6,
                          7, 0, 1, 2, 0, 1, 2, 3, 5, 6, 7, 8, 0, 1, 2, 3, 5, 6, 7, 8, 0, 1, 2, 3, 4, 6, 7, 8, 9, 1, 2,
                          3, 4,
                          6, 7, 8, 9, 1, 2, 3, 4, 5, 7, 8, 9, 10, 2, 3, 4, 5, 7, 8, 9, 10, 2, 3, 4, 5, 6, 8, 9, 10, 3,
                          4, 5,
                          6, 8, 9, 10, 3, 4, 5, 4, 5, 6, 7, 9, 10, 11, 4, 5, 6, 7, 9, 10, 11, 4, 5, 6, 4, 5, 6, 7, 8,
                          10,
                          11, 12, 4, 5, 6, 7, 8, 10, 11, 12, 4, 5, 6, 7, 8, 9, 11, 12, 13, 76, 5, 6, 7, 8, 9, 11, 12,
                          13, 7,
                          8, 9, 10, 12, 13, 14, 76, 88, 7, 8, 9, 10, 12, 13, 14, 76, 8, 9, 10, 11, 13, 14, 15, 8, 9, 10,
                          11,
                          13, 14, 15, 8, 9, 10, 10, 11, 12, 14, 15, 16, 10, 11, 12, 14, 15, 16, 10, 11, 12, 14, 15, 11,
                          12,
                          13, 15, 16, 17, 11, 12, 13, 15, 16, 17, 11, 12, 13, 15, 16, 12, 13, 14, 16, 17, 18, 12, 13,
                          14,
                          16, 17, 18, 12, 13, 14, 16, 17, 13, 14, 15, 17, 18, 19, 13, 14, 15, 17, 18, 19, 13, 14, 15,
                          17,
                          18, 14, 15, 16, 18, 19, 20, 14, 15, 16, 18, 19, 20, 14, 15, 16, 18, 19, 15, 16, 17, 19, 20,
                          21,
                          15, 16, 17, 19, 20, 21, 15, 16, 17, 19, 20, 16, 17, 18, 20, 21, 22, 16, 17, 18, 20, 21, 22,
                          16,
                          17, 18, 20, 21, 17, 18, 19, 21, 22, 23, 24, 17, 18, 19, 21, 22, 23, 24, 17, 18, 19, 18, 19,
                          20,
                          22, 23, 24, 25, 82, 18, 19, 20, 22, 23, 24, 25, 82, 18, 19, 20, 21, 23, 24, 25, 26, 27, 19,
                          20,
                          21, 23, 24, 25, 26, 27, 19, 20, 21, 22, 24, 25, 26, 27, 28, 20, 21, 22, 24, 25, 26, 27, 28,
                          20,
                          21, 22, 23, 25, 26, 27, 28, 21, 22, 23, 25, 26, 27, 28, 21, 22, 23, 21, 22, 23, 24, 26, 27,
                          28,
                          29, 21, 22, 23, 24, 26, 27, 28, 29, 21, 22, 23, 24, 25, 27, 28, 29, 30, 22, 23, 24, 25, 27,
                          28,
                          29, 30, 22, 23, 24, 25, 26, 28, 29, 30, 31, 23, 24, 25, 26, 28, 29, 30, 31, 23, 24, 25, 26,
                          27,
                          29, 30, 31, 32, 24, 25, 26, 27, 29, 30, 31, 32, 24, 25, 26, 27, 28, 30, 31, 32, 25, 26, 27,
                          28,
                          30, 31, 32, 25, 26, 27, 26, 27, 28, 29, 31, 32, 26, 27, 28, 29, 31, 32, 26, 27, 28, 29, 31,
                          26,
                          27, 28, 29, 30, 32, 46, 26, 27, 28, 29, 30, 32, 46, 26, 27, 28, 27, 28, 29, 30, 31, 46, 27,
                          28,
                          29, 30, 31, 46, 27, 28, 29, 30, 31, 0, 1, 2, 3, 34, 41, 60, 0, 1, 2, 3, 34, 41, 60, 0, 1, 2,
                          0,
                          33, 35, 40, 41, 60, 0, 33, 35, 40, 41, 60, 0, 33, 35, 40, 41, 33, 34, 36, 37, 39, 40, 41, 60,
                          61,
                          62, 33, 34, 36, 37, 39, 40, 41, 34, 35, 37, 38, 39, 40, 63, 64, 34, 35, 37, 38, 39, 40, 63,
                          64,
                          34, 36, 38, 39, 51, 64, 36, 38, 39, 51, 64, 36, 38, 39, 51, 64, 36, 38, 36, 37, 39, 51, 52,
                          63,
                          64, 65, 36, 37, 39, 51, 52, 63, 64, 65, 36, 35, 36, 37, 38, 40, 62, 63, 64, 65, 66, 67, 96,
                          35,
                          36, 37, 38, 40, 33, 34, 35, 36, 37, 38, 39, 41, 60, 61, 62, 63, 65, 66, 67, 96, 33, 0, 1, 2,
                          33,
                          34, 35, 40, 60, 61, 67, 0, 1, 2, 33, 34, 35, 40, 43, 49, 50, 51, 68, 43, 49, 50, 51, 68, 43,
                          49,
                          50, 51, 68, 43, 49, 42, 44, 45, 48, 49, 50, 68, 69, 42, 44, 45, 48, 49, 50, 68, 69, 42, 42,
                          43,
                          45, 46, 47, 48, 49, 70, 42, 43, 45, 46, 47, 48, 49, 70, 42, 32, 44, 46, 47, 48, 71, 72, 73,
                          32,
                          44, 46, 47, 48, 71, 72, 73, 32, 29, 30, 31, 32, 45, 47, 72, 29, 30, 31, 32, 45, 47, 72, 29,
                          30,
                          31, 30, 31, 32, 44, 45, 46, 48, 71, 72, 73, 30, 31, 32, 44, 45, 46, 48, 42, 43, 44, 45, 46,
                          47,
                          49, 50, 69, 70, 71, 72, 73, 74, 75, 97, 42, 42, 43, 44, 48, 50, 68, 69, 70, 74, 75, 97, 42,
                          43,
                          44, 48, 50, 68, 42, 43, 49, 51, 52, 68, 69, 75, 42, 43, 49, 51, 52, 68, 69, 75, 42, 37, 38,
                          42,
                          50, 52, 53, 64, 68, 37, 38, 42, 50, 52, 53, 64, 68, 37, 51, 53, 54, 51, 53, 54, 51, 53, 54,
                          51,
                          53, 54, 51, 53, 54, 51, 53, 51, 52, 54, 55, 56, 57, 59, 51, 52, 54, 55, 56, 57, 59, 51, 52,
                          54,
                          52, 53, 55, 56, 57, 58, 59, 52, 53, 55, 56, 57, 58, 59, 52, 53, 55, 53, 54, 56, 57, 76, 77,
                          78,
                          88, 53, 54, 56, 57, 76, 77, 78, 88, 53, 53, 54, 55, 57, 58, 77, 78, 79, 88, 53, 54, 55, 57,
                          58,
                          77, 78, 79, 53, 54, 55, 56, 58, 59, 78, 79, 80, 90, 53, 54, 55, 56, 58, 59, 78, 53, 54, 56,
                          57,
                          59, 79, 80, 81, 82, 92, 53, 54, 56, 57, 59, 79, 80, 53, 54, 57, 58, 80, 81, 82, 92, 53, 54,
                          57,
                          58, 80, 81, 82, 92, 53, 0, 1, 2, 3, 4, 33, 34, 41, 61, 62, 66, 67, 96, 0, 1, 2, 3, 0, 1, 33,
                          34,
                          35, 40, 41, 60, 62, 63, 65, 66, 67, 96, 0, 1, 33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 60, 61,
                          63,
                          64, 65, 66, 67, 96, 35, 36, 37, 38, 39, 40, 51, 52, 61, 62, 64, 65, 66, 67, 96, 35, 36, 36,
                          37,
                          38, 39, 51, 52, 53, 63, 65, 66, 96, 36, 37, 38, 39, 51, 52, 36, 37, 38, 39, 52, 61, 62, 63,
                          64,
                          66, 67, 96, 36, 37, 38, 39, 52, 41, 60, 61, 62, 63, 64, 65, 67, 96, 41, 60, 61, 62, 63, 64,
                          65,
                          67, 0, 1, 2, 3, 33, 34, 35, 40, 41, 60, 61, 62, 65, 66, 96, 0, 1, 42, 43, 49, 50, 51, 52, 53,
                          69,
                          74, 75, 97, 42, 43, 49, 50, 51, 52, 42, 43, 44, 48, 49, 50, 51, 68, 70, 71, 73, 74, 75, 97,
                          42,
                          43, 44, 42, 43, 44, 45, 46, 47, 48, 49, 50, 68, 69, 71, 72, 73, 74, 75, 97, 31, 32, 44, 45,
                          46,
                          47, 48, 69, 70, 72, 73, 74, 75, 97, 31, 32, 44, 28, 29, 30, 31, 32, 45, 46, 47, 70, 71, 73,
                          74,
                          97, 28, 29, 30, 31, 29, 30, 31, 32, 44, 45, 46, 47, 48, 70, 71, 72, 74, 75, 97, 29, 30, 47,
                          68,
                          69, 70, 71, 72, 73, 75, 97, 47, 68, 69, 70, 71, 72, 73, 75, 42, 43, 49, 50, 52, 68, 69, 70,
                          71,
                          72, 73, 74, 97, 42, 43, 49, 50, 6, 7, 8, 9, 10, 11, 12, 55, 77, 87, 88, 89, 95, 6, 7, 8, 9,
                          55,
                          56, 76, 78, 86, 87, 88, 89, 95, 55, 56, 76, 78, 86, 87, 88, 89, 54, 55, 56, 57, 58, 76, 77,
                          79,
                          80, 85, 86, 87, 88, 89, 90, 94, 95, 54, 55, 56, 57, 58, 59, 77, 78, 80, 81, 84, 85, 86, 89,
                          90,
                          91, 94, 54, 57, 58, 59, 78, 79, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 54, 58, 59, 80, 82,
                          83,
                          84, 91, 92, 93, 58, 59, 80, 82, 83, 84, 91, 92, 20, 21, 22, 23, 24, 25, 26, 59, 81, 83, 91,
                          92,
                          93, 20, 21, 22, 23, 17, 18, 19, 20, 21, 22, 23, 81, 82, 84, 91, 92, 93, 17, 18, 19, 20, 16,
                          17,
                          18, 19, 20, 81, 82, 83, 85, 91, 92, 93, 94, 16, 17, 18, 19, 14, 15, 16, 17, 18, 83, 84, 86,
                          87,
                          90, 93, 94, 95, 14, 15, 16, 17, 11, 12, 13, 14, 15, 16, 76, 77, 85, 87, 88, 89, 94, 95, 11,
                          12,
                          13, 9, 10, 11, 12, 13, 14, 76, 77, 86, 88, 89, 95, 9, 10, 11, 12, 13, 7, 8, 9, 10, 11, 12, 13,
                          55,
                          76, 77, 86, 87, 89, 95, 7, 8, 9, 55, 56, 76, 77, 78, 79, 86, 87, 88, 90, 95, 55, 56, 76, 77,
                          78,
                          79, 56, 57, 58, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 58, 59, 79, 80, 81,
                          82,
                          83, 84, 85, 90, 92, 93, 94, 58, 59, 79, 80, 19, 20, 21, 22, 23, 24, 25, 59, 81, 82, 83, 84,
                          91,
                          93, 19, 20, 21, 18, 19, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 94, 18, 19, 79, 80, 15, 16,
                          17,
                          78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 15, 13, 14, 15, 76, 77, 78, 85, 86, 87,
                          88,
                          89, 90, 94, 13, 14, 15, 76, 34, 35, 36, 38, 39, 40, 41, 60, 61, 62, 63, 64, 65, 66, 67, 34,
                          35,
                          43, 44, 45, 47, 48, 49, 50, 68, 69, 70, 71, 72, 73, 74, 75, 43, 44]

        reverse_index2 = [0, 2, 4, 6, 8, 4, 0, 2, 4, 6, 8, 4, 0, 2, 4, 6, 8, 0, 0, 2, 4, 6, 8, 8, 0, 0, 2, 4, 6, 8, 8,
                          0, 0,
                          2, 1, 1, 0, 2, 4, 6, 1, 1, 0, 2, 4, 6, 1, 1, 0, 2, 4, 3, 2, 1, 0, 2, 4, 6, 3, 2, 1, 0, 2, 4,
                          6, 3,
                          2, 1, 6, 3, 3, 1, 0, 2, 4, 7, 6, 3, 3, 1, 0, 2, 4, 7, 6, 6, 4, 3, 1, 0, 2, 4, 8, 6, 4, 3, 1,
                          0, 2,
                          4, 8, 6, 7, 5, 3, 1, 0, 2, 4, 9, 7, 5, 3, 1, 0, 2, 4, 9, 7, 6, 5, 3, 1, 0, 2, 4, 6, 5, 3, 1,
                          0, 2,
                          4, 6, 5, 3, 7, 5, 3, 1, 0, 2, 4, 7, 5, 3, 1, 0, 2, 4, 7, 5, 3, 9, 7, 5, 3, 1, 0, 2, 5, 9, 7,
                          5, 3,
                          1, 0, 2, 5, 9, 9, 7, 5, 3, 1, 0, 2, 5, 8, 9, 7, 5, 3, 1, 0, 2, 5, 7, 5, 3, 1, 0, 2, 5, 9, 9,
                          7, 5,
                          3, 1, 0, 2, 5, 9, 9, 5, 3, 1, 0, 2, 4, 9, 5, 3, 1, 0, 2, 4, 9, 5, 3, 6, 3, 1, 0, 2, 6, 6, 3,
                          1, 0,
                          2, 6, 6, 3, 1, 0, 2, 7, 3, 1, 0, 3, 7, 7, 3, 1, 0, 3, 7, 7, 3, 1, 0, 3, 6, 3, 1, 1, 3, 6, 6,
                          3, 1,
                          1, 3, 6, 6, 3, 1, 1, 3, 7, 3, 1, 1, 3, 7, 7, 3, 1, 1, 3, 7, 7, 3, 1, 1, 3, 6, 3, 0, 1, 3, 6,
                          6, 3,
                          0, 1, 3, 6, 6, 3, 0, 1, 3, 7, 2, 0, 1, 3, 5, 7, 2, 0, 1, 3, 5, 7, 2, 0, 1, 3, 5, 2, 0, 1, 3,
                          5, 5,
                          2, 0, 1, 3, 5, 5, 2, 0, 1, 3, 4, 2, 0, 1, 3, 5, 8, 4, 2, 0, 1, 3, 5, 8, 4, 2, 0, 5, 2, 0, 1,
                          3, 5,
                          7, 9, 5, 2, 0, 1, 3, 5, 7, 9, 5, 4, 2, 0, 1, 3, 5, 7, 9, 4, 2, 0, 1, 3, 5, 7, 9, 4, 4, 2, 0,
                          1, 3,
                          5, 7, 9, 4, 2, 0, 1, 3, 5, 7, 9, 4, 4, 2, 0, 1, 3, 5, 7, 4, 2, 0, 1, 3, 5, 7, 4, 2, 0, 9, 4,
                          2, 0,
                          1, 3, 5, 6, 9, 4, 2, 0, 1, 3, 5, 6, 9, 9, 4, 2, 0, 1, 3, 5, 6, 9, 4, 2, 0, 1, 3, 5, 6, 9, 8,
                          4, 2,
                          0, 1, 3, 4, 6, 8, 4, 2, 0, 1, 3, 4, 6, 8, 6, 4, 2, 0, 1, 3, 3, 5, 6, 4, 2, 0, 1, 3, 3, 5, 6,
                          6, 4,
                          2, 0, 1, 2, 3, 6, 4, 2, 0, 1, 2, 3, 6, 4, 2, 6, 4, 2, 0, 1, 1, 6, 4, 2, 0, 1, 1, 6, 4, 2, 0,
                          1, 8,
                          6, 4, 2, 0, 0, 9, 8, 6, 4, 2, 0, 0, 9, 8, 6, 4, 8, 6, 4, 2, 0, 6, 8, 6, 4, 2, 0, 6, 8, 6, 4,
                          2, 0,
                          2, 4, 5, 8, 3, 1, 6, 2, 4, 5, 8, 3, 1, 6, 2, 4, 5, 7, 1, 1, 5, 0, 8, 7, 1, 1, 5, 0, 8, 7, 1,
                          1, 5,
                          0, 7, 1, 2, 8, 6, 0, 5, 9, 8, 8, 7, 1, 2, 8, 6, 0, 5, 8, 2, 1, 4, 0, 6, 7, 9, 8, 2, 1, 4, 0,
                          6, 7,
                          9, 8, 1, 0, 5, 5, 7, 1, 0, 5, 5, 7, 1, 0, 5, 5, 7, 1, 0, 4, 0, 2, 2, 6, 6, 2, 8, 4, 0, 2, 2,
                          6, 6,
                          2, 8, 4, 4, 0, 2, 1, 4, 7, 4, 4, 5, 9, 9, 7, 4, 0, 2, 1, 4, 5, 2, 0, 3, 9, 9, 4, 2, 7, 5, 4,
                          8, 9,
                          8, 6, 6, 5, 5, 7, 9, 0, 0, 3, 3, 2, 6, 7, 5, 7, 9, 0, 0, 3, 3, 2, 5, 0, 6, 7, 2, 5, 0, 6, 7,
                          2, 5,
                          0, 6, 7, 2, 5, 1, 1, 8, 5, 0, 4, 9, 7, 1, 1, 8, 5, 0, 4, 9, 7, 1, 8, 1, 1, 7, 4, 0, 6, 9, 8,
                          1, 1,
                          7, 4, 0, 6, 9, 8, 7, 2, 1, 0, 6, 9, 8, 9, 7, 2, 1, 0, 6, 9, 8, 9, 7, 8, 5, 4, 2, 2, 1, 6, 8,
                          5, 4,
                          2, 2, 1, 6, 8, 5, 4, 9, 7, 6, 3, 0, 0, 3, 6, 2, 7, 9, 7, 6, 3, 0, 0, 3, 7, 3, 0, 3, 5, 2, 2,
                          9, 8,
                          4, 5, 7, 6, 7, 9, 6, 7, 2, 0, 4, 2, 1, 3, 2, 7, 9, 5, 8, 2, 0, 4, 2, 1, 3, 0, 4, 3, 1, 5, 2,
                          6, 8,
                          0, 4, 3, 1, 5, 2, 6, 8, 0, 5, 6, 5, 5, 1, 5, 8, 8, 5, 6, 5, 5, 1, 5, 8, 8, 5, 0, 1, 9, 0, 1,
                          9, 0,
                          1, 9, 0, 1, 9, 0, 1, 9, 0, 1, 7, 0, 1, 9, 9, 9, 9, 7, 0, 1, 9, 9, 9, 9, 7, 0, 1, 4, 0, 5, 2,
                          0, 2,
                          4, 4, 0, 5, 2, 0, 2, 4, 4, 0, 5, 6, 5, 0, 8, 6, 6, 9, 6, 6, 5, 0, 8, 6, 6, 9, 6, 6, 3, 2, 0,
                          2, 7,
                          7, 5, 7, 8, 3, 2, 0, 2, 7, 7, 5, 7, 2, 0, 2, 1, 1, 2, 4, 3, 5, 7, 2, 0, 2, 1, 1, 2, 4, 4, 3,
                          7, 1,
                          0, 5, 4, 8, 8, 8, 4, 3, 7, 1, 0, 5, 4, 7, 4, 7, 0, 9, 6, 6, 6, 7, 4, 7, 0, 9, 6, 6, 6, 7, 4,
                          5, 6,
                          7, 8, 2, 5, 4, 1, 9, 6, 1, 9, 4, 5, 6, 7, 8, 9, 3, 4, 6, 2, 3, 1, 2, 9, 7, 4, 0, 5, 8, 9, 3,
                          9, 6,
                          5, 6, 7, 7, 3, 1, 7, 4, 2, 3, 6, 4, 1, 4, 0, 8, 5, 3, 3, 1, 8, 8, 9, 7, 3, 1, 0, 5, 8, 3, 8,
                          5, 8,
                          4, 2, 8, 4, 3, 9, 1, 1, 7, 8, 8, 4, 2, 8, 4, 3, 9, 6, 5, 9, 7, 9, 6, 0, 0, 3, 5, 2, 9, 6, 5,
                          9, 7,
                          9, 3, 4, 1, 5, 5, 3, 2, 1, 9, 3, 4, 1, 5, 5, 3, 2, 9, 8, 8, 9, 6, 7, 9, 9, 6, 0, 0, 5, 6, 2,
                          4, 9,
                          8, 4, 8, 8, 2, 3, 2, 8, 1, 8, 1, 9, 4, 8, 8, 2, 3, 2, 3, 5, 8, 8, 1, 3, 9, 0, 3, 7, 8, 5, 0,
                          5, 3,
                          5, 8, 9, 6, 5, 6, 8, 6, 1, 4, 7, 6, 4, 2, 5, 4, 2, 4, 0, 9, 8, 6, 4, 3, 3, 4, 9, 1, 1, 0, 4,
                          7, 2,
                          9, 8, 6, 8, 7, 7, 5, 4, 5, 2, 5, 8, 1, 1, 6, 7, 8, 7, 7, 5, 9, 8, 8, 9, 9, 7, 4, 7, 9, 5, 0,
                          0, 1,
                          6, 3, 9, 8, 9, 5, 5, 2, 4, 3, 2, 3, 1, 9, 5, 5, 2, 4, 3, 2, 3, 6, 9, 9, 6, 8, 1, 0, 6, 8, 9,
                          5, 3,
                          4, 6, 9, 9, 6, 9, 8, 6, 6, 5, 6, 7, 8, 4, 2, 0, 8, 7, 9, 8, 6, 6, 1, 5, 2, 7, 5, 3, 2, 0, 3,
                          1, 5,
                          2, 7, 5, 3, 2, 0, 7, 4, 3, 4, 9, 7, 5, 1, 3, 7, 7, 6, 7, 2, 2, 3, 4, 6, 7, 4, 3, 4, 6, 9, 0,
                          0, 9,
                          9, 6, 9, 7, 0, 7, 2, 8, 5, 3, 3, 3, 2, 5, 7, 6, 7, 8, 3, 2, 7, 4, 4, 8, 5, 1, 6, 2, 3, 5, 0,
                          2, 3,
                          5, 1, 6, 2, 3, 5, 0, 2, 7, 6, 6, 6, 7, 8, 9, 8, 4, 2, 8, 0, 8, 7, 6, 6, 6, 8, 7, 6, 5, 7, 8,
                          9, 3,
                          1, 1, 3, 1, 2, 8, 7, 6, 5, 7, 5, 4, 5, 9, 7, 5, 5, 1, 4, 5, 1, 5, 7, 5, 4, 5, 8, 5, 4, 6, 8,
                          8, 2,
                          2, 8, 4, 9, 0, 9, 8, 5, 4, 6, 9, 8, 4, 4, 6, 8, 5, 8, 2, 5, 5, 4, 6, 1, 9, 8, 4, 9, 8, 5, 4,
                          6, 7,
                          1, 3, 1, 1, 3, 2, 9, 8, 5, 4, 6, 9, 8, 7, 7, 8, 9, 9, 6, 0, 2, 8, 1, 5, 5, 9, 8, 7, 3, 6, 3,
                          0, 2,
                          8, 3, 4, 3, 6, 0, 3, 6, 3, 0, 2, 8, 8, 6, 8, 1, 0, 1, 9, 6, 3, 6, 9, 6, 6, 9, 7, 1, 8, 6, 5,
                          6, 2,
                          0, 3, 4, 3, 9, 5, 3, 0, 9, 6, 5, 6, 2, 9, 8, 8, 7, 7, 9, 9, 7, 2, 0, 1, 8, 5, 5, 9, 8, 8, 9,
                          8, 9,
                          8, 1, 4, 0, 0, 4, 8, 1, 4, 7, 9, 8, 9, 8, 8, 9, 9, 6, 4, 7, 7, 4, 0, 4, 7, 9, 1, 9, 6, 6, 8,
                          8, 9,
                          9, 4, 1, 8, 5, 0, 0, 4, 1, 9, 8, 8, 9, 9, 4, 9, 7, 7, 8, 7, 7, 8, 5, 3, 0, 2, 3, 2, 0, 3, 9,
                          7, 7,
                          7, 9, 8, 7, 7, 8, 4, 3, 0, 3, 4, 3, 0, 2, 7, 7]
        interpreter = tf.lite.Interpreter(model_path="resnet18_10_98_32_256.tflite")
    elif landmarks_number == 29:
        num_lms = 29
        max_len = 19
        reverse_index1 = [2, 4, 5, 8, 12, 13, 16, 2, 4, 5, 8, 12, 13, 16, 2, 4, 5, 8, 12, 3, 6, 7, 9, 14, 15, 17, 3, 6,
                          7,
                          9, 14, 15, 17, 3, 6, 7, 9, 14, 0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 0, 3, 4, 5, 6, 7,
                          0,
                          1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 0, 1, 2, 4, 5, 0, 2, 5, 8, 10, 12, 13, 16, 0, 2,
                          5,
                          8, 10, 12, 13, 16, 0, 2, 5, 0, 2, 4, 8, 10, 12, 13, 16, 0, 2, 4, 8, 10, 12, 13, 16, 0, 2, 4,
                          1, 3,
                          7, 9, 11, 14, 15, 17, 1, 3, 7, 9, 11, 14, 15, 17, 1, 3, 7, 1, 3, 6, 9, 11, 14, 15, 17, 1, 3,
                          6, 9,
                          11, 14, 15, 17, 1, 3, 6, 0, 2, 4, 5, 10, 12, 13, 16, 0, 2, 4, 5, 10, 12, 13, 16, 0, 2, 4, 1,
                          3, 6,
                          7, 11, 14, 15, 17, 1, 3, 6, 7, 11, 14, 15, 17, 1, 3, 6, 0, 2, 3, 4, 5, 8, 12, 13, 16, 18, 20,
                          0,
                          2, 3, 4, 5, 8, 12, 13, 1, 2, 3, 6, 7, 9, 14, 15, 17, 19, 20, 21, 1, 2, 3, 6, 7, 9, 14, 0, 2,
                          4, 5,
                          8, 10, 13, 16, 0, 2, 4, 5, 8, 10, 13, 16, 0, 2, 4, 0, 2, 4, 5, 8, 10, 12, 16, 18, 22, 0, 2, 4,
                          5,
                          8, 10, 12, 16, 18, 1, 3, 6, 7, 9, 11, 15, 17, 1, 3, 6, 7, 9, 11, 15, 17, 1, 3, 6, 1, 3, 6, 7,
                          9,
                          11, 14, 17, 19, 23, 1, 3, 6, 7, 9, 11, 14, 17, 19, 0, 2, 4, 5, 8, 10, 12, 13, 18, 0, 2, 4, 5,
                          8,
                          10, 12, 13, 18, 0, 1, 3, 6, 7, 9, 11, 14, 15, 19, 1, 3, 6, 7, 9, 11, 14, 15, 19, 1, 0, 4, 5,
                          8,
                          10, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 1, 6, 7, 9, 11, 14, 15, 17, 18, 20,
                          21,
                          22, 23, 24, 25, 26, 27, 28, 1, 1, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25,
                          26,
                          27, 28, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 18, 19, 20, 22, 23, 24, 25, 26, 27, 18, 20,
                          21,
                          24, 25, 26, 27, 28, 18, 20, 21, 24, 25, 26, 27, 28, 18, 20, 21, 19, 21, 24, 25, 26, 27, 28,
                          19,
                          21, 24, 25, 26, 27, 28, 19, 21, 24, 25, 26, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 18, 19,
                          20,
                          21, 22, 23, 25, 26, 27, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 18, 19, 20, 21, 22, 23, 24,
                          26,
                          27, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 18, 19, 20, 21, 22, 23, 24, 25, 27, 20, 21, 22,
                          23,
                          24, 25, 26, 28, 20, 21, 22, 23, 24, 25, 26, 28, 20, 21, 22, 22, 23, 24, 25, 26, 27, 22, 23,
                          24,
                          25, 26, 27, 22, 23, 24, 25, 26, 27, 22]
        reverse_index2 = [9, 3, 5, 3, 7, 7, 7, 9, 3, 5, 3, 7, 7, 7, 9, 3, 5, 3, 7, 9, 3, 5, 3, 7, 7, 7, 9, 3, 5, 3, 7,
                          7, 7,
                          9, 3, 5, 3, 7, 7, 6, 6, 6, 8, 9, 7, 0, 9, 6, 5, 9, 6, 7, 6, 6, 6, 8, 9, 9, 7, 6, 8, 9, 6, 6,
                          7, 8,
                          0, 9, 6, 6, 6, 9, 7, 6, 8, 9, 2, 5, 0, 5, 5, 3, 6, 5, 2, 5, 0, 5, 5, 3, 6, 5, 2, 5, 0, 1, 3,
                          0, 4,
                          4, 2, 4, 2, 1, 3, 0, 4, 4, 2, 4, 2, 1, 3, 0, 2, 4, 0, 5, 5, 3, 5, 5, 2, 4, 0, 5, 5, 3, 5, 5,
                          2, 4,
                          0, 1, 3, 0, 4, 4, 2, 4, 2, 1, 3, 0, 4, 4, 2, 4, 2, 1, 3, 0, 0, 7, 4, 3, 6, 5, 3, 4, 0, 7, 4,
                          3, 6,
                          5, 3, 4, 0, 7, 4, 0, 7, 4, 3, 6, 5, 2, 4, 0, 7, 4, 3, 6, 5, 2, 4, 0, 7, 4, 6, 0, 8, 7, 7, 6,
                          4, 2,
                          3, 5, 6, 6, 0, 8, 7, 7, 6, 4, 2, 6, 8, 0, 7, 7, 6, 4, 3, 3, 5, 7, 9, 6, 8, 0, 7, 7, 6, 4, 3,
                          1, 1,
                          1, 2, 3, 1, 0, 3, 1, 1, 1, 2, 3, 1, 0, 3, 1, 1, 5, 4, 5, 4, 0, 2, 1, 1, 6, 9, 5, 4, 5, 4, 0,
                          2, 1,
                          1, 6, 3, 1, 1, 1, 2, 3, 1, 0, 3, 1, 1, 1, 2, 3, 1, 0, 3, 1, 1, 5, 5, 5, 4, 0, 2, 1, 1, 7, 9,
                          5, 5,
                          5, 4, 0, 2, 1, 1, 7, 4, 2, 2, 2, 1, 1, 0, 0, 9, 4, 2, 2, 2, 1, 1, 0, 0, 9, 4, 4, 2, 2, 2, 1,
                          1, 0,
                          0, 9, 4, 2, 2, 2, 1, 1, 0, 0, 9, 4, 8, 9, 8, 8, 7, 8, 8, 8, 8, 1, 3, 0, 8, 5, 8, 9, 9, 9, 8,
                          8, 9,
                          8, 8, 7, 8, 8, 8, 8, 2, 4, 8, 0, 6, 7, 8, 8, 7, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9, 0, 0, 0, 6, 6,
                          4, 4,
                          6, 7, 8, 1, 1, 0, 5, 5, 2, 3, 3, 4, 6, 1, 1, 0, 5, 5, 2, 3, 3, 4, 2, 8, 7, 7, 5, 4, 6, 5, 2,
                          8, 7,
                          7, 5, 4, 6, 5, 2, 8, 7, 2, 8, 8, 6, 5, 5, 4, 2, 8, 8, 6, 5, 5, 4, 2, 8, 8, 6, 5, 3, 3, 3, 1,
                          2, 3,
                          0, 2, 2, 3, 3, 3, 3, 1, 2, 3, 0, 2, 2, 4, 4, 4, 2, 1, 1, 0, 0, 1, 2, 4, 4, 4, 2, 1, 1, 0, 0,
                          1, 7,
                          6, 5, 5, 3, 2, 1, 1, 0, 1, 7, 6, 5, 5, 3, 2, 1, 1, 0, 9, 6, 4, 4, 3, 2, 1, 0, 9, 6, 4, 4, 3,
                          2, 1,
                          0, 9, 6, 4, 7, 7, 9, 9, 7, 3, 7, 7, 9, 9, 7, 3, 7, 7, 9, 9, 7, 3, 7]
        interpreter = tf.lite.Interpreter(model_path="resnet18_10_29_32_256.tflite")
    else:
        return []

    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    interpreter.allocate_tensors()
    # print(input_details[0])
    # print(output_details[0])
    # print(output_details[1])
    # print(output_details[2])
    # print(output_details[3])
    # print(output_details[4])

    interpreter.set_tensor(input_details[0]['index'], image.to(device))
    interpreter.invoke()
    outputs_nb_x: Tensor = torch.from_numpy(interpreter.get_tensor(output_details[0]['index']))  # outputs_nb_x
    outputs_nb_y: Tensor = torch.from_numpy(interpreter.get_tensor(output_details[1]['index']))  # outputs_nb_y
    outputs_y: Tensor = torch.from_numpy(interpreter.get_tensor(output_details[2]['index']))  # outputs_y
    outputs_x: Tensor = torch.from_numpy(interpreter.get_tensor(output_details[3]['index']))  # outputs_x
    outputs_cls: Tensor = torch.from_numpy(interpreter.get_tensor(output_details[4]['index']))  # outputs_cls
    tmp_batch, tmp_channel, tmp_height, tmp_width = outputs_cls.size()
    assert tmp_batch == 1

    outputs_cls = outputs_cls.view(tmp_batch * tmp_channel, -1)
    max_ids = torch.argmax(outputs_cls, 1)
    max_ids = max_ids.view(-1, 1)
    max_ids_nb = max_ids.repeat(1, 10).view(-1, 1)

    outputs_x = outputs_x.view(tmp_batch * tmp_channel, -1)
    outputs_x_select = torch.gather(outputs_x, 1, max_ids)
    outputs_x_select = outputs_x_select.squeeze(1)
    outputs_y = outputs_y.view(tmp_batch * tmp_channel, -1)
    outputs_y_select = torch.gather(outputs_y, 1, max_ids)
    outputs_y_select = outputs_y_select.squeeze(1)

    outputs_nb_x = outputs_nb_x.view(tmp_batch * 10 * tmp_channel, -1)
    outputs_nb_x_select = torch.gather(outputs_nb_x, 1, max_ids_nb)
    outputs_nb_x_select = outputs_nb_x_select.squeeze(1).view(-1, 10)
    outputs_nb_y = outputs_nb_y.view(tmp_batch * 10 * tmp_channel, -1)
    outputs_nb_y_select = torch.gather(outputs_nb_y, 1, max_ids_nb)
    outputs_nb_y_select = outputs_nb_y_select.squeeze(1).view(-1, 10)

    lms_pred_x = (max_ids % tmp_width).view(-1, 1).float() + outputs_x_select.view(-1, 1)
    lms_pred_y = torch.floor(max_ids / tmp_width).view(-1, 1).float() + outputs_y_select.view(-1, 1)
    lms_pred_x /= 1.0 * 256 / 32
    lms_pred_y /= 1.0 * 256 / 32

    lms_pred_nb_x = (max_ids % tmp_width).view(-1, 1).float() + outputs_nb_x_select
    lms_pred_nb_y = torch.floor(max_ids / tmp_width).view(-1, 1).float() + outputs_nb_y_select
    lms_pred_nb_x = lms_pred_nb_x.view(-1, 10)
    lms_pred_nb_y = lms_pred_nb_y.view(-1, 10)
    lms_pred_nb_x /= 1.0 * 256 / 32
    lms_pred_nb_y /= 1.0 * 256 / 32

    # merge predictions
    tmp_nb_x = lms_pred_nb_x[reverse_index1, reverse_index2].view(num_lms, max_len)
    tmp_nb_y = lms_pred_nb_y[reverse_index1, reverse_index2].view(num_lms, max_len)
    tmp_x = torch.mean(torch.cat((lms_pred_x, tmp_nb_x), dim=1), dim=1).view(-1, 1)
    tmp_y = torch.mean(torch.cat((lms_pred_y, tmp_nb_y), dim=1), dim=1).view(-1, 1)
    lms_pred_merge = torch.cat((tmp_x, tmp_y), dim=1)
    lms_pred_merge = lms_pred_merge.cpu().numpy()

    # de-normalize
    lms_pred_merge[:, 0] *= float(width)
    lms_pred_merge[:, 1] *= float(height)

    return lms_pred_merge
